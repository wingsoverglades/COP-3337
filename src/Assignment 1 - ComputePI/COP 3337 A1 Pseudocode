Luis Vitier
William Feild
COP 33317
September 5, 2017
Compute PI Pseudocode

let mut current_pi_approximation: f64 = 1.0
let mut previous_pi_approximation: f64 = 0.0
let mut denominator: f64 = 3.0
let mut iterations: u64 = 0
let mut operand_decider: bool = false

let NUMERATOR: f64 = 1.0
let DELTA: u64 = 0.00000001 //Ironic I know
let MASTER_MAGNIFIER: u64 = 4

while ( absolute_value ( current_pi_approximation â€“ previous_pi_approximation ) > DELTA)
{
    previous_pi_approximation = current_pi_approximation

    if (operand_decider)
    {
        current_pi_approximation = (( previous_pi_approximation / MASTER_MAGNIFIER ) + ( NUMERATOR / denominator ) * 4)
    }
    else
    {
        current_pi_approximation = (( previous_pi_approximation / MASTER_MAGNIFIER ) + ( NUMERATOR / denominator ) * 4)
    }

    denominator += 2
    operand_decider = !operand_decider
    iterations++
}

print(current_pi_approximation)
print(Math.PI)
print(iterations)
